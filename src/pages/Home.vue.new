<template>
  <div class="home-container">
    <!-- 顶部搜索区域 -->
    <div class="search-section">
      <div class="brand">
        <div class="brand-content">
          <img :src="toolLogo" alt="logo" class="toollogo" />
          <h1 class="title">{{ isEnglish ? 'HUHA Developer Toolbox' : '呼哈开发者工具箱' }}</h1>
        </div>
        
        <!-- 添加操作按钮组 -->
        <div class="header-actions">
          <el-tooltip :content="isEnglish ? uiTextI18n.projectIntro.en : uiTextI18n.projectIntro.zh" placement="bottom">
            <el-button class="action-btn" @click="showAboutProject">
              <el-icon><InfoFilled /></el-icon>
            </el-button>
          </el-tooltip>
          
          <el-tooltip :content="isEnglish ? uiTextI18n.aboutAuthor.en : uiTextI18n.aboutAuthor.zh" placement="bottom">
            <el-button class="action-btn" @click="showAboutAuthor">
              <el-icon><User /></el-icon>
            </el-button>
          </el-tooltip>
          
          <el-tooltip content="GitHub" placement="bottom">
            <el-button class="action-btn" @click="openGitHub">
              <svg class="github-icon" viewBox="0 0 16 16" width="1em" height="1em">
                <path fill="currentColor" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path>
              </svg>
            </el-button>
          </el-tooltip>

          <div class="divider"></div>

          <!-- 修改主题切换按钮 -->
          <el-tooltip :content="isEnglish ? uiTextI18n.switchTheme.en : uiTextI18n.switchTheme.zh" placement="bottom">
            <button class="theme-toggle" @click="toggleTheme" :class="{ 'is-dark': isDarkMode }">
              <div class="toggle-icon">
                <el-icon>
                  <Moon v-if="!isDarkMode" />
                  <Sunny v-else />
                </el-icon>
              </div>
            </button>
          </el-tooltip>
          
          <!-- 添加语言切换按钮 -->
          <el-tooltip :content="isEnglish ? uiTextI18n.switchLanguage.en : uiTextI18n.switchLanguage.zh" placement="bottom">
            <button class="language-toggle" @click="toggleLanguage" :class="{ 'is-english': isEnglish }">
              <div class="toggle-icon">
                <span>{{ isEnglish ? 'EN' : '中' }}</span>
              </div>
            </button>
          </el-tooltip>
        </div>
      </div>

      <!-- 搜索区域重新设计 -->
      <div class="search-container">
        <div class="search-wrapper" :class="{ 'is-focused': isSearchFocused }">
          <div class="search-box">
            <el-icon class="search-icon">
              <Search />
            </el-icon>
            <input v-model="searchText" type="text" class="search-input" :placeholder="isEnglish ? uiTextI18n.searchPlaceholder.en : uiTextI18n.searchPlaceholder.zh"
              @focus="isSearchFocused = true" @blur="handleSearchBlur" @keyup.enter="handleSearch" />
            <div class="search-divider"></div>
            <div class="engine-selector" @click.stop="showEngineDropdown = true">
              <span class="engine-name">{{ isEnglish ? searchEnginesI18n[currentEngine.key].en : searchEnginesI18n[currentEngine.key].zh }}</span>
              <el-icon class="arrow-icon" :class="{ 'is-active': showEngineDropdown }">
                <ArrowDown />
              </el-icon>
            </div>
          </div>

          <!-- 搜索引擎下拉菜单 -->
          <transition name="fade">
            <div v-if="showEngineDropdown" class="engine-dropdown">
              <div class="engine-list">
                <div v-for="engine in searchEngines" :key="engine.key" class="engine-item"
                  :class="{ active: currentEngine.key === engine.key }" @click="selectEngine(engine)">
                  <el-icon class="engine-icon">
                    <component :is="engine.icon" />
                  </el-icon>
                  <span class="engine-label">{{ isEnglish ? searchEnginesI18n[engine.key].en : searchEnginesI18n[engine.key].zh }}</span>
                  <el-icon v-if="currentEngine.key === engine.key" class="check-icon">
                    <Check />
                  </el-icon>
                </div>
              </div>
            </div>
          </transition>
        </div>

        <!-- 背景遮罩 -->
        <div class="search-backdrop" :class="{ 'is-visible': isSearchFocused || showEngineDropdown }"
          @click="handleBackdropClick"></div>
      </div>
    </div>

    <!-- 添加一个新的滚动容器 -->
    <div 
      class="tools-scroll-container" 
      :class="{ 'has-minimized-tools': minimizedTools.length > 0 }"
    >
      <!-- 添加分类标签区域 -->
      <div class="category-tags">
        <el-radio-group v-model="currentCategory" size="large">
          <el-radio-button value="all">
            <el-icon>
              <Grid />
            </el-icon>
            {{ isEnglish ? categoriesI18n.all.en : categoriesI18n.all.zh }}
          </el-radio-button>
          <el-radio-button v-for="category in categories" :key="category.key" :value="category.key">
            <el-icon>
              <component :is="getCategoryIcon(category.key)" />
            </el-icon>
            {{ isEnglish ? categoriesI18n[category.key].en : categoriesI18n[category.key].zh }}
          </el-radio-button>
        </el-radio-group>
      </div>

      <!-- 工具卡片区域 -->
      <div class="tools-section">
        <transition-group 
          name="fade" 
          tag="div" 
          class="tools-grid"
          :css="false"
        >
          <div 
            v-for="(tool, index) in paginatedTools" 
            :key="tool.code" 
            :data-index="index"
            class="tool-card" 
            @click="navigateToTool(tool)"
          >
            <div class="tool-icon">
              <img :src="tool.icon" :alt="getToolName(tool)" class="tool-icon-image"/>
            </div>
            <div class="tool-content">
              <h3 class="tool-title">{{ getToolName(tool) }}</h3>
              <p class="tool-desc">{{ getToolDescription(tool) }}</p>
            </div>
          </div>
        </transition-group>
      </div>
    </div>

    <!-- 添加统计信息模块 -->
    <div class="stats-placeholder"></div>
    <div class="stats-section">
      <div class="stats-container">
        <div class="stats-content">
          <div class="stats-numbers">
            <div class="stat-item">
              <span class="stat-value">{{ toolsCount }}</span>
              <span class="stat-label">{{ isEnglish ? uiTextI18n.tools.en : uiTextI18n.tools.zh }}</span>
            </div>
            <div class="separator"></div>
            <div class="stat-item">
              <span class="stat-value">{{ categoriesCount }}</span>
              <span class="stat-label">{{ isEnglish ? uiTextI18n.categories.en : uiTextI18n.categories.zh }}</span>
            </div>
            <div class="separator"></div>
            <div class="stat-item">
              <span class="stat-value">v1.0.0</span>
              <span class="stat-label">{{ isEnglish ? uiTextI18n.version.en : uiTextI18n.version.zh }}</span>
            </div>
          </div>
          
          <div class="stats-divider"></div>
          
          <div class="stats-links">
            <a href="#" @click.prevent="openSourceLink">
              {{ isEnglish ? uiTextI18n.openSource.en : uiTextI18n.openSource.zh }}
            </a>
            <span class="dot">·</span>
            <a href="#" @click.prevent="openAuthorBlog">
              {{ isEnglish ? uiTextI18n.aboutAuthor.en : uiTextI18n.aboutAuthor.zh }}
            </a>
            <span class="dot">·</span>
            <a href="#" @click.prevent="showAboutProject">
              {{ isEnglish ? uiTextI18n.aboutProject.en : uiTextI18n.aboutProject.zh }}
            </a>
            <!-- <span class="dot">·</span>
            <a href="#" @click.prevent="showUserManual">
              使用说明
            </a> -->
          </div>
        </div>
      </div>
    </div>

    <!-- 添加对话框组件 -->
    <el-dialog
      v-model="showProjectDialog"
      :title="isEnglish ? 'About Project' : '关于项目'"
      width="500px"
      class="about-dialog"
    >
      <div class="about-content">
        <h3>{{ isEnglish ? 'HUHA Developer Toolbox' : '呼哈开发者工具箱' }}</h3>
        <p>{{ isEnglish ? 'An online toolbox that integrates common development tools, including the following features:' : '一个集成了常用开发工具的在线工具箱，包含以下特性：' }}</p>
        <ul>
          <li>🛠️ {{ isEnglish ? 'Rich tool collection' : '丰富的工具集合' }}</li>
          <li>🎨 {{ isEnglish ? 'Elegant user interface' : '优雅的用户界面' }}</li>
          <li>🌙 {{ isEnglish ? 'Dark mode support' : '支持深色模式' }}</li>
          <li>📱 {{ isEnglish ? 'Responsive design' : '响应式设计' }}</li>
          <li>⚡ {{ isEnglish ? 'Fast local operation' : '快速的本地运行' }}</li>
        </ul>
        <p class="version">{{ isEnglish ? 'Current version: v1.0.0' : '当前版本：v1.0.0' }}</p>
        <p>
          {{ isEnglish ? 'This tool was developed with the assistance of Cursor AI.' : '本工具由Cursor AI辅助开发。' }}
        </p>
      </div>
    </el-dialog>


    <el-dialog
      v-model="showAuthorDialog"
      :title="isEnglish ? 'About Author' : '关于作者'"
      width="500px"
      class="about-dialog"
    >
      <div class="about-content">
        <div class="author-info">
          <img :src="authorAvatar" alt="author" class="author-avatar" />
          <div class="author-details">
            <h3>HUHA</h3>
            <p>{{ isEnglish ? 'Rookie Developer / Lost Wanderer' : '菜鸟开发者 / 江湖迷途小书童' }}</p>
          </div>
        </div>
        <div class="contact-info">
          <p>{{ isEnglish ? 'Contact:' : '联系方式：' }}</p>
          <ul>
            <li>
              <el-icon><Message /></el-icon>
              <span>Email: wsyhok@126.com</span>
            </li>
            <li>
              <el-icon><Link /></el-icon>
              <a 
                href="https://huhage.github.io/huhawebsite" 
                target="_blank"
                class="blog-link"
                @click.stop="openBlog"
              >
                Blog: https://huhage.github.io/huhawebsite
              </a>
            </li>
          </ul>
        </div>
      </div>
    </el-dialog>

    <!-- 使用新组件替换原有的最小化工具栏 -->
    <MinimizedToolsBar :has-stats="showStats" />

    <!-- 添加使用说明对话框 -->
    <el-dialog
      v-model="showManualDialog"
      :title="isEnglish ? 'User Manual' : '使用说明'"
      width="800px"
      class="manual-dialog"
    >
      <div v-if="manualLoadError" class="manual-error">
        <div class="error-icon">
          <el-icon><WarningFilled /></el-icon>
        </div>
        <h3>{{ isEnglish ? 'Loading Failed' : '加载失败' }}</h3>
        <p>{{ isEnglish ? 'Sorry, the user manual failed to load. You can:' : '很抱歉，使用说明文档加载失败。您可以：' }}</p>
        <ul>
          <li>{{ isEnglish ? 'Check your network connection and try again' : '检查网络连接后重试' }}</li>
          <li>{{ isEnglish ? 'Visit the online documentation' : '访问在线文档' }}</li>
          <li>{{ isEnglish ? 'Contact technical support' : '联系技术支持' }}</li>
        </ul>
        <el-button type="primary" @click="retryLoadManual">{{ isEnglish ? 'Reload' : '重新加载' }}</el-button>
      </div>
      <div v-else class="manual-content" v-html="manualContent"></div>
    </el-dialog>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, watch, inject, nextTick } from 'vue'
import { useRouter } from 'vue-router'
import { keepAliveComponents } from '@/stores/keepAliveStore'
import { useTheme } from '@/composables/useTheme'
import { useLanguage } from '@/composables/useLanguage'
import { toolsI18n, categoriesI18n, searchEnginesI18n, uiTextI18n } from '@/config/i18n'
import {
  Search,
  ArrowDown,
  Document,
  Edit,
  Timer,
  Key,
  Grid,
  Histogram,
  Connection,
  Clock,
  Collection,
  Check,
  Sunny,
  Moon,
  InfoFilled,
  User,
  Message,
  Link,
  Tools,
  Platform,
  Close,
  Delete,
  ArrowRight,
  ArrowLeft,
  WarningFilled
} from '@element-plus/icons-vue'
import toolLogo from '@/assets/logo/tool_logo.png'
import jsonIcon from '@/assets/icons/json.svg'
import xmlIcon from '@/assets/icons/xml.svg'
import timestampIcon from '@/assets/icons/timestamp.svg'
import base64Icon from '@/assets/icons/base64.svg'
import urlIcon from '@/assets/icons/url.svg'
import uuidIcon from '@/assets/icons/uuid.svg'
import qrcodeIcon from '@/assets/icons/qrcode.svg'
import md5Icon from '@/assets/icons/md5.svg'
import unicodeIcon from '@/assets/icons/unicode.svg'
import httpIcon from '@/assets/icons/http.svg'
import idcardIcon from '@/assets/icons/idcard.svg'
import sqlIcon from '@/assets/icons/sql.svg'
import cronIcon from '@/assets/icons/cron.svg'
import regexIcon from '@/assets/icons/regex.svg'
import diffIcon from '@/assets/icons/diff.svg'
import sqlParamsIcon from '@/assets/icons/sql-params.svg'
import authorAvatar from '@/assets/avatar.png'
import creditIcon from '@/assets/icons/credit.svg'
import sqlFormatIcon from '@/assets/icons/sql-format.svg'
import configEditorIcon from '@/assets/icons/config.svg'
import linuxIcon from '@/assets/icons/linux.svg'
import aesIcon from '@/assets/icons/aes.svg'
import rsaIcon from '@/assets/icons/rsa.svg'
import sqlZHIcon from '@/assets/icons/sql-zh.svg'
import sqlTruncateIcon from '@/assets/icons/sql-truncate.svg'
import sqlAddIcon from '@/assets/icons/sql-add.svg'
import wordToHtmlIcon from '@/assets/icons/word-to-html.svg'
import hanBao from '@/assets/icons/汉堡.svg'
import lanQiu from '@/assets/icons/篮球.svg'
import lotteryIcon from '@/assets/icons/抽奖.svg'
import pixelBreakoutIcon from '@/assets/icons/pixel-breakout.svg' // 添加这一行
import tanchisheIcon from '@/assets/icons/贪吃蛇.svg'
import fanyinliIcon from '@/assets/icons/反应力.svg'

import { minimizeTools } from '@/stores/minimizeTools'
import { MinimizeTools } from '@/stores/minimizeTools'
import { ElMessageBox, ElMessage } from 'element-plus'
import { marked } from 'marked'
import axios from 'axios'
import MinimizedToolsBar from '@/components/MinimizedToolsBar.vue'
import { tools } from '@/config/tools'
import { track } from '@vercel/analytics'

const isSearchFocused = ref(false)
const showEngineDropdown = ref(false)
const { isDarkMode, toggleTheme } = useTheme()
const { isEnglish, toggleLanguage } = useLanguage()

// 搜索引擎配置
const searchEngines = [
  { key: 'local', name: '站内搜索', url: '', icon: Document },
  { key: 'google', name: 'Google', url: 'https://www.google.com/search?q=', icon: Search },
  { key: 'bing', name: 'Bing', url: 'https://www.bing.com/search?q=', icon: Search },
  { key: 'baidu', name: '百度', url: 'https://www.baidu.com/s?wd=', icon: Search }
]

const currentEngine = ref(searchEngines[0])
const searchText = ref('')
const router = useRouter()

// 工具分类配置
const categories = [
  { key: 'format', name: '格式化', icon: Document },
  { key: 'encode', name: '编解码', icon: Connection },
  { key: 'convert', name: '转换', icon: Histogram },
  { key: 'generate', name: '生成', icon: Collection },
  { key: 'sql', name: 'SQL工具', icon: Connection }, // 添加 SQL 工具分类
  { key: 'other', name: '其他', icon: Grid },
  { key: 'fun', name: '趣味', icon: Grid },
]

const currentCategory = ref('all')

// 获取工具名称（支持多语言）
const getToolName = (tool) => {
  if (toolsI18n[tool.code]) {
    return isEnglish.value ? toolsI18n[tool.code].en.name : toolsI18n[tool.code].zh.name
  }
  return tool.name
}

// 获取工具描述（支持多语言）
const getToolDescription = (tool) => {
  if (toolsI18n[tool.code]) {
    return isEnglish.value ? toolsI18n[tool.code].en.description : toolsI18n[tool.code].zh.description
  }
  return tool.description
}

// 修改过滤工具的计算属性
const filteredTools = computed(() => {
  let filtered = tools

  // 按分类筛选
  if (currentCategory.value !== 'all') {
    filtered = filtered.filter(tool => 
      Array.isArray(tool.category) 
        ? tool.category.includes(currentCategory.value)
        : tool.category === currentCategory.value
    )
  }

  // 按搜索关键词筛选
  if (searchText.value) {
    const keyword = searchText.value.toLowerCase()
    filtered = filtered.filter(tool => {
      const name = getToolName(tool).toLowerCase()
      const description = getToolDescription(tool).toLowerCase()
      return name.includes(keyword) || description.includes(keyword)
    })
  }

  return filtered
})

// 获取分类名称
const getCategoryName = (categoryKey: string) => {
  const category = categories.find(c => c.key === categoryKey)
  return category ? category.name : ''
}

// 获取分类图标
const getCategoryIcon = (categoryKey: string) => {
  const category = categories.find(c => c.key === categoryKey)
  return category ? category.icon : Document
}

// 处理搜索引擎切换
const handleSearchEngine = (engineKey: string) => {
  currentEngine.value = searchEngines.find(engine => engine.key === engineKey) || searchEngines[0]
}

// 处理搜索
const handleSearch = () => {
  if (!searchText.value) return

  if (currentEngine.value.key === 'local') {
    // 站内搜索逻辑
    return
  }

  // 使用外部搜索引擎
  window.utools.shellOpenExternal(currentEngine.value.url + encodeURIComponent(searchText.value))
}

// 导航到工具页面
const navigateToTool = (tool: typeof tools[0]) => {
  if (tool.path.startsWith('http')) {
    // 对于外部链接，使用新窗口打开
    if (window.utools) {
      window.utools.shellOpenExternal(tool.path)
    } else {
      window.open(tool.path, '_blank')
    }
  } else {
    // 内部路由导航保持不变
    router.push(tool.path)
  }
}

const handleSearchBlur = () => {
  // 延迟关闭焦点状态，以便点击下拉菜单时不会立即关闭
  setTimeout(() => {
    if (!showEngineDropdown.value) {
      isSearchFocused.value = false
    }
  }, 100)
}

const selectEngine = (engine: typeof searchEngines[0]) => {
  currentEngine.value = engine
  showEngineDropdown.value = false
}

const handleBackdropClick = () => {
  isSearchFocused.value = false
  showEngineDropdown.value = false
}

// 初始化主题和语言
onMounted(() => {
  // 优先使用存储的主题设置
  const savedTheme = localStorage.getItem('theme')
  if (savedTheme) {
    isDarkMode.value = savedTheme === 'dark'
  } else {
    // 否则使用系统主题
    isDarkMode.value = window.matchMedia('(prefers-color-scheme: dark)').matches
  }
  document.documentElement.classList.toggle('dark', isDarkMode.value)

  // 监听系统主题变化
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (!localStorage.getItem('theme')) {
      isDarkMode.value = e.matches
      document.documentElement.classList.toggle('dark', isDarkMode.value)
    }
  })
})

// 对话框控制
const showProjectDialog = ref(false)
const showAuthorDialog = ref(false)

// 按钮事件处理
const showAboutProject = () => {
  showProjectDialog.value = true
}

const showAboutAuthor = () => {
  showAuthorDialog.value = true
}

const openGitHub = () => {
  const url = 'https://gitee.com/huhage/programmers-assistant-utools/tree/master'
  
  // 判断是否在 uTools 环境中
  if (window.utools) {
    window.utools.shellOpenExternal(url)
  } else {
    // 在普通浏览器环境中使用 window.open
    window.open(url, '_blank')
  }
}

const openBlog = (e: MouseEvent) => {
  e.preventDefault()
  const url = 'https://huhage.github.io/huhawebsite'
  
  if (window.utools) {
    window.utools.shellOpenExternal(url)
  } else {
    window.open(url, '_blank')
  }
}

// 在 tools-section 后面添加新的统计模块
const toolsCount = computed(() => tools.length)
const categoriesCount = computed(() => categories.length)

// 移除分页相关的计算属性,直接使用过滤后的工具列表
const paginatedTools = computed(() => {
  return filteredTools.value
})

// 监听筛选条件变化，重置页码
watch([searchText, currentCategory], () => {
  // 移除分页相关的状态和方法
  // 删除:
  // currentPage.value = 1
  // pageSize.value = 12
  // handlePageChange = (page: number) => {
  //   currentPage.value = page
  // }
})

const minimizeTools = inject('minimizeTools') as MinimizeTools

// 添加一个计算属性来获取排序后的最小化工具列表
const minimizedTools = computed(() => {
  return minimizeTools.tools
})

const openMinimizedTool = (tool: MinimizedTool) => {
  // 确保目标组件被包含在 keep-alive 中
  if (!keepAliveComponents.value.includes(tool.component)) {
    keepAliveComponents.value.push(tool.component)
  }
  // 等待 DOM 更新后再导航
  nextTick(() => {
    router.push(tool.path)
  })
}

const closeMinimizedTool = (tool: MinimizedTool) => {
  minimizeTools.remove(tool.path)
}

// 添加一个计算属性来判断是否显示统计区